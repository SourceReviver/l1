#!/bin/bash

# Adapted from https://stackoverflow.com/questions/3760086;
# see also https://github.com/unegma/bash-functions\
#                 /blob/main/update.sh

# make sure no uncommitted
STATUS=$(git status --porcelain)
if [[ -n "$STATUS" ]]; then
   echo "Uncommitted code.  Not tagging a new version."
   exit 1
fi

# get highest tag number
VERSION=`git describe --abbrev=0 --tags`

# replace . with space so can split into an array
VERSION_BITS=(${VERSION//./ })

# get number parts and increase last one by 1
VNUM1=${VERSION_BITS[0]}
VNUM2=${VERSION_BITS[1]}
VNUM3=${VERSION_BITS[2]}
VNUM3=$((VNUM3+1))

# create new tag
NEW_TAG="$VNUM1.$VNUM2.$VNUM3"

echo "Updating $VERSION to $NEW_TAG"

function update_version_file() {
    NEWVER="$1"
    rm -f src/version.go
    echo "package main" > src/version.go
    echo >> src/version.go
    echo "var version string = \"$NEWVER\"" >> src/version.go
}

update_version_file $NEW_TAG
go build -o l1 ./src
if [ $? -ne 0 ]; then
    exit 1
fi
git commit -am "Update version prior to tag."

# get current hash and see if it already has a tag
GIT_COMMIT=`git rev-parse HEAD`
NEEDS_TAG=`git describe --contains $GIT_COMMIT 2>/dev/null`
# only tag if no tag already
if [ -z "$NEEDS_TAG" ]; then
    git tag $NEW_TAG
    echo "Tagged with $NEW_TAG"
    git push --tags
else
    echo "Already a tag on this commit"
fi

update_version_file "$NEW_TAG-dirty"
git add src/version.go
git commit -m "Taint $NEW_TAG"
git push
