#!/usr/bin/env l1

;; Beginnings of a roguelike game

(defn listlen (msg)
  (let ((words-len (apply + (map (comp len split) msg)))
        (spaces-len (dec (len msg))))
    (+ words-len spaces-len)))

(defn write-width-centered (h msg)
  (let* ((dims (screen-size))
         (w (- (/ (car dims) 2)
               (/ (listlen msg) 2))))
    (screen-write w h msg)))

(defn press-any-key () (screen-get-key))

(defn intro ()
  (screen-clear)
  (write-width-centered 10 '(O N O M A T))
  (write-width-centered 12 '(press any key to continue))
  (press-any-key)
  (screen-clear))

(def MAXROOM 20)
(def MINROOM 4)

(defn make-room (screen-dims)
  (let* ((w (first screen-dims))
         (h (second screen-dims))
         (room-width (min MAXROOM
                          (max MINROOM
                               (inc (randint (dec w))))))
         (room-height (min MAXROOM
                           (max MINROOM
                                (inc (randint (dec h))))))
         (room-pos-w (inc (randint (inc (- w room-width)))))
         (room-pos-h (inc (randint (inc (- h room-height))))))
    (list room-pos-w
          room-pos-h
          room-width
          room-height)))

(defn room-x (room)      (nth 0 room))
(defn room-y (room)      (nth 1 room))
(defn room-width (room)  (nth 2 room))
(defn room-height (room) (nth 3 room))

(defn random-position-in-room (room)
  (list (+ (room-x room) (randint (room-width room)))
        (+ (room-y room) (randint (room-height room)))))

(defn draw-room (room)
  (foreach h (map (partial + (room-y room))
                  (range (room-height room)))
    (screen-write (room-x room) h
                  (list (fuse (repeat (room-width room)
                                      PERIOD))))))

(defn make-player (player-position)
  player-position)

(defn player-x (player)
  (first player))

(defn player-y (player)
  (second player))

(defn draw-player (player)
  (screen-write (player-x player)
                (player-y player)
                (list ATSIGN)))

(defn move-player-y (player incr)
  (list (first player)
        (+ (second player) incr)))

(defn update-pos (l n f)
  (doc (update nth position of a list by applying f to the
               value of the nth element, leaving the others
               unchanged))
  (when (< n (len l))
    (concat (take n l)
            (list (f (nth n l)))
            (drop (inc n) l))))

(defn move-player (player delta)
  (list (+ (player-x player) (first delta))
        (+ (player-y player) (second delta))))

(defn valid-move (room player delta)
  (and (<= (room-x room)
           (+ (player-x player) (first delta))
           (+ (room-x room) (room-width room) -1))
       (<= (room-y room)
           (+ (player-y player) (second delta))
           (+ (room-y room) (room-height room) -1))))

(progn
  (with-screen
   (intro)
   (let* ((dims (screen-size))
          (room (make-room dims))
          (player-pos (random-position-in-room room))
          (player (make-player player-pos))
          (continue t))
     (while continue
       (draw-room room)
       (draw-player player)
       (let ((k (screen-get-key)))
         (cond
          ((= k 'q) (set! continue ()))
          ((= k 'h) (when (valid-move room player '(-1 0))
                      (set! player
                            (move-player player '(-1 0)))))
          ((= k 'l) (when (valid-move room player '(1 0))
                      (set! player
                            (move-player player '(1 0)))))
          ((= k 'k) (when (valid-move room player '(0 -1))
                      (set! player
                            (move-player player '(0 -1)))))
          ((= k 'j) (when (valid-move room player '(0 1))
                      (set! player
                            (move-player player '(0 1)))))
          ((= k 'y) (when (valid-move room player '(-1 -1))
                      (set! player
                            (move-player player '(-1 -1)))))
          ((= k 'u) (when (valid-move room player '(1 -1))
                      (set! player
                            (move-player player '(1 -1)))))
          ((= k 'b) (when (valid-move room player '(-1 1))
                      (set! player
                            (move-player player '(-1 1)))))
          ((= k 'n) (when (valid-move room player '(1 1))
                      (set! player
                            (move-player player '(1 1))))))))))
  (println)
  (printl (exclaim '(thanks for playing)))
  (println))
