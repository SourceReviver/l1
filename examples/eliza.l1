(defn assoc (x pairs)
  (cond ((not pairs) ())
        ((= x (caar pairs))
         (car pairs))
        (t (assoc x (cdr pairs)))))

(defn mklist (x)
  (cond ((list? x) x)
        (t (list x))))

(defn variable? (a)
  (and (atom? a)
       (= (car (split a))
          '?)))

(is (variable? (quote ?x)))
(is (not (variable? 'foo)))

(defn cadr (l) (car (cdr l)))

(is (= '(i . you)
       (assoc 'i
              '((i . you)
                (you . i)
                (me . you)
                (am . are)))))

(is (= '(am . are)
       (assoc 'am
              '((i . you)
                (you . i)
                (me . you)
                (am . are)))))

;; to do next: sublis

