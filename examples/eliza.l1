#!/usr/bin/env l1

;; Adapted from P. Norvig, PAIP Chapter 5, which itself was adapted
;; from Eliza, by Joseph Weizenbaum
;; (https://en.wikipedia.org/wiki/ELIZA)

(defn assoc (x pairs)
  (cond ((not pairs) ())
        ((= x (caar pairs))
         (car pairs))
        (t (assoc x (cdr pairs)))))

(defn mklist (x)
  (if (list? x)
    x
    (list x)))

(defn variable? (a)
  (and (atom? a)
       (= (car (split a))
          '?)))

(defn cadr (l) (car (cdr l)))

(defn assoc-sub (alist item)
  (let ((match (assoc item alist)))
    (if match
      (cdr match)
      item)))

(defn tree-sub (f x)
  (cond ((not x) ())
        ((not (list? x)) (f x))
        (t (cons (tree-sub f (car x))
                 (tree-sub f (cdr x))))))

(defn sublis (pairs l)
  (tree-sub (lambda (x) (assoc-sub pairs x))
            l))

(def fail ())
(def no-bindings '((t . t)))

(defn get-binding (var bindings)
  (doc (Find a (variable . value) pair in a binding list))
  (assoc var bindings))

(defn binding-val (binding)
  (doc (Get the value part of a single binding))
  (cdr binding))

(defn lookup (var bindings)
  (doc (Get the value part (for var) from a binding list))
  (binding-val (get-binding var bindings)))

(defn extend-bindings (var val bindings)
  (doc (Add a (var . value) pair to a binding list))
  (cons (cons var val)
        ;; Once we add a "real" binding,
        ;; we can get rid of the dummy no-bindings:
        (cond ((= bindings no-bindings) ())
              (t bindings))))

(defn match-variable (var input bindings)
  (doc (Does VAR match input? Uses (or updates) and returns bindings))
  (let ((binding (get-binding var bindings)))
    (cond ((not binding) (extend-bindings var input bindings))
          ((= input (binding-val binding)) bindings)
          (t fail))))

(defn segment-pattern? (pattern)
  (doc (Is this a segment matching pattern, e.g. ((?* var) . pat)))
  (and (list? pattern)
       (= (car pattern)
          '?*)))

(defn segment-pattern? (pattern)
  (doc (Is this a segment matching pattern, e.g. ((?* var) . pat)))
  (and (list? pattern)
       (list? (car pattern))
       (= (car (car pattern))
          '?*)))

(defn segment-match (pattern input bindings start)
  (doc (Match the segment pattern ((?* var) . pat) against input))
  (let ((var (cadr (car pattern)))
        (pat (cdr pattern)))
    (if (not pat)
      (match-variable var input bindings)
      ;; We assume that pat starts with a constant
      ;; In other words, a pattern can't have 2 consecutive vars
      (let ((pos (position (car pat) input start)))
        (cond
         ((not pos) fail)
         (t
          (let ((b2 (pat-match pat
                               (subseq input pos ())
                               (match-variable var
                                               (subseq input 0 pos)
                                               bindings))))
            ;; If this match failed, try another longer one
            (if (= b2 fail)
              (segment-match pattern input bindings (+ pos 1))
              b2))))))))

(defn pat-match (pattern input bindings)
  (doc (Match pattern against input in the context of the bindings))
  (cond ((= bindings fail) fail)
        ((= pattern input) bindings)
        ((segment-pattern? pattern)
         (segment-match pattern input bindings 0))
        ((and (list? pattern) (list? input))
         (pat-match (cdr pattern)
                    (cdr input)
                    (pat-match (car pattern)
                               (car input)
                               bindings)))
        (t fail)))

(defn niladd (a b)
  (cond ((not a) ())
        ((not b) ())
        (t (+ a b))))

(defn position (a input start)
  (cond ((not input) ())
        ((< 0 start) (niladd start (position a (drop start input) 0)))
        ((= a (car input)) 0)
        (t (niladd 1 (position a (cdr input) 0)))))

(defn subseq (l start end)
  (if (not end)
    (drop start l)
    (take (- end start) (subseq l start ()))))

(defn rule-pattern (rule) (car rule))
(defn rule-responses (rule) (cdr rule))

(def *eliza-rules*
     '((((?* ?x) hello (?* ?y))
        (How do you do. Please state your problem.))
       (((?* ?x) I want (?* ?y))
        (What would it mean if you got ?y)
        (Why do you want ?y) (Suppose you got ?y soon))
       (((?* ?x) if (?* ?y))
        (Do you really think its likely that ?y) (Do you wish that ?y)
        (What do you think about ?y) (Really-- if ?y))
       (((?* ?x) no (?* ?y))
        (Why not?) (You are being a bit negative)
        (Are you saying NO just to be negative?))
       (((?* ?x) I was (?* ?y))
        (Were you really?) (Perhaps I already knew you were ?y)
        (Why do you tell me you were ?y now?))
       (((?* ?x) I feel (?* ?y))
        (Do you often feel ?y ?))
       (((?* ?x) I felt (?* ?y))
        (What other feelings do you have?))
       (((?* ?x))
        (Interesting))))

(defn switch-viewpoint (words)
  (doc (Change I to you and vice versa, and so on))
  (sublis '((I . you) (you . I) (me . you) (am . are))
          words))

(defn apply-rule (rule)
  (let ((result (pat-match (rule-pattern rule)
                           input
                           no-bindings)))
    (when (not (= result fail))
      (sublis (switch-viewpoint result)
              (random-elt (rule-responses rule))))))

(defn use-eliza-rules (input)
  (doc (Find some rule with which to transform the input))
  (some (lambda (rule)
          (let ((result (pat-match (rule-pattern rule) input no-bindings)))
            (when (not (= result fail))
              (sublis (switch-viewpoint result)
                      (randchoice (rule-responses rule))))))
        *eliza-rules*))

(defn eliza ()
  (doc (Respond to user input using pattern matching rules.))
  (loop
   (print 'eliza>)
   (print SPACE)
   (printl (flatten (use-eliza-rules (readlist))))))

;; TESTS -----------------------------------------------
(test '(variable)
  (is (variable? (quote ?x)))
  (is (not (variable? 'foo))))

(test '(assoc)
  (is (= '(i . you)
         (assoc 'i
                '((i . you)
                  (you . i)
                  (me . you)
                  (am . are)))))
  (is (= '(am . are)
         (assoc 'am
                '((i . you)
                  (you . i)
                  (me . you)
                  (am . are))))))

(test '(tree-sub and assoc-sub)
  (is (= '(2 3 4 (5 6 (7) (8 9) 10 11 12))
         (tree-sub inc
                   '(1 2 3 (4 5 (6) (7 8) 9 10 11)))))

  (is (= 'are (assoc-sub '((i . you)
                           (you . i)
                           (me . you)
                           (am . are))
                         'am))))

(test '(sublis)
  (is (= '(a b c) (sublis () '(a b c))))
  (is (= '(what would it mean to you if you
                got a tree (or something better than a tree) ?)
         (sublis '((?X . tree))
                 '(what would it mean to you
                        if you got a ?X
                        (or something better than a ?X) ?)))))

(test '(segment-pattern?)
  (is (segment-pattern? '((?* ?x) . a)))
  (is (not (segment-pattern? '?a))))

(test '(position)
  (is (= 0 (position 0 (range 5) 0)))
  (is (= 1 (position 1 (range 5) 0)))
  (is (not (position 'foo (range 5) 0)))
  (is (= 4 (position 4 (range 5) 0)))
  (is (= 4 (position 4 (range 5) 4))))

(test '(subseq)
  (is (= 'lo_world
         (fuse (subseq (split 'hello_world)
                       3 ()))))
  (is (= 'lo
         (fuse (subseq (split 'hello_world)
                       3 5)))))

(test '(some)
  (is (not (some odd? '(2 4 6))))
  (is (= t (some odd? '(2 4 5 6))))
  (is (some (lambda (x) (= x 4))
            '(2 4 5 6))))

(test '(pat-match)
  (is (= '((?y there) (?x))
         (pat-match '((?* ?x) hello (?* ?y))
                    '(hello there)
                    no-bindings)))
  (is (= '((?y vacation))
         (pat-match '(i need a (?* ?y))
                    '(i need a vacation)
                    no-bindings)))
  (is (= fail
         (pat-match '(i really need a (?* ?y))
                    '(i need a vacation)
                    no-bindings)))
  (is (= no-bindings
         (pat-match '(this is easy) '(this is easy) no-bindings)))

  (is (= fail (pat-match '((?* ?p) need (?* ?x))
                         '(Mr Hulot and I need a vacation)
                         fail)))
  (is (= '((?x a vacation) (?p Mr Hulot and I))
         (pat-match '((?* ?p) need (?* ?x))
                    '(Mr Hulot and I need a vacation)
                    no-bindings)))

  (is (= '((?x 1 2 a b))
         (pat-match '((?* ?x) a b (?* ?x))
                    '(1 2 a b a b 1 2 a b)
                    no-bindings))))

(test '(response)
  (is (= '(Do you often feel sad ?)
         (flatten (use-eliza-rules '(I feel sad))))))

(eliza)
