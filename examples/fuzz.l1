;; Fuzzing eval tests.  Generate expressions endleslly and see if we
;; can crash the interpreter.

(defn in? (x l)
  (cond ((not l) ())
        ((= (car l) x) t)
        (t (in? x (cdr l)))))

;; Try these operators to POC the approach:
;; (def operators '(+ - * / list cons concat))

;; Remove operators that muddle or slow the test:
(def operators (remove (lambda (x)
                         (in? x '(eval
                                  exit
                                  loop
                                  range
                                  readlist
                                  screen-start

                                  ;; This feels like a bit of a cheat,
                                  ;; but set! can redefine anything,
                                  ;; including macros or functions
                                  ;; which are built into l1, so
                                  ;; anything goes at that point,
                                  ;; including stack overflows (Issue
                                  ;; #78):
                                  set!

                                  shell
                                  sleep
                                  while
                                  with-screen)))
                       (forms)))

(defn oper ()
  (randchoice operators))

(defn randpos (n)
  (inc (randint n)))

(defn genatom ()
  (fuse (randalpha (randpos (randpos (randpos 20))))))

(defn genint ()
  (fuse (randigits (randpos 3))))

(defn gennumlis ()
  (repeatedly (randint 10) genint))

(defn args (n)
  (if (zero? n)
    ()
    (cons ((randchoice (concat (list (lambda () (expr (/ (* n 3) 5)))
                                     (lambda () (args (/ (* n 3) 5)))
                                     (lambda () (lambda (() . _)))
                                     (constantly t))
                               (repeat 5 genatom)
                               (repeat 10 genint))))
          (args (dec n)))))

(defn expr (n)
  (cons (oper) (args n)))

(def ELLIPSIS (fuse (repeat 3 PERIOD)))

(loop
 (let ((e (expr (randpos (randpos 10)))))
   (print e ELLIPSIS)
   (if (swallow (eval e))
     (println BANG)
     (println PERIOD))))
