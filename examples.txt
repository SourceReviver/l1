$ l1
> (quote foo)
foo
> 'foo
foo
> '123
123
> (quote (the (ten (laws (of (greenspun))))))
(the (ten (laws (of (greenspun)))))
> ((lambda (x . xs) (list x xs)) 1 2 3 4)
(1 (2 3 4))
> (help)
Builtins and Special Forms:
      Name  Arity    Description
            *    0+     Multiply 0 or more numbers
            +    0+     Add 0 or more numbers
            -    1+     Subtract 0 or more numbers from the first argument
            /    2+     Divide the first argument by the rest
            <    1+     Return t if the arguments are in strictly increasing order, () otherwise
           <=    1+     Return t if the arguments are in increasing (or qual) order, () otherwise
            =    1+     Return t if the arguments are equal, () otherwise
            >    1+     Return t if the arguments are in strictly decreasing order, () otherwise
           >=    1+     Return t if the arguments are in decreasing (or equal) order, () otherwise
          and    0+     SPECIAL FORM: Boolean and
        apply    2      Apply a function to a list of arguments
        atom?    1      Return t if the argument is an atom, () otherwise
         bang    1      Return a new atom with exclamation point added
         body    1      Return the body of a lambda function
          car    1      Return the first element of a list
          cdr    1      Return a list with the first element removed
        comma    1      Return a new atom with a comma at the end
         cond    0+     SPECIAL FORM: Conditional branching
         cons    2      Add an element to the front of a (possibly empty) list
          def    2      SPECIAL FORM: Set a value
         defn    2+     SPECIAL FORM: Create and name a function
          doc    1      Return the doclist for a function
     downcase    1      Return a new atom with all characters in lower case
       errors    1+     SPECIAL FORM: Error checking (for tests)
         fuse    1      Fuse a list of numbers or atoms into a single atom
         help    0      Print this message
           is    1      Assert that the argument is truthy (not ())
       lambda    1+     SPECIAL FORM: Create a function
          len    1      Return the length of a list
          let    1+     SPECIAL FORM: Create a local scope
         list    0+     Return a list of the given arguments
        list?    1      Return t if the argument is a list, () otherwise
         loop    1+     SPECIAL FORM: Loop forever
macroexpand-1    1      Expand a macro
          not    1      Return t if the argument is nil, () otherwise
      number?    1      Return true if the argument is a number, else ()
           or    0+     SPECIAL FORM: Boolean or
       period    1      Return a new atom with a period added to the end
         pos?    1      Return true if the (numeric) argument is positive, else ()
        print    0+     Print the arguments
       printl    1      Print a list argument, without parentheses
      println    0+     Print the arguments and a newline
        quote    1      SPECIAL FORM: Quote an expression
      randint    1      Return a random integer between 0 and the argument minus 1
     readlist    0      Read a list from stdin
          rem    2      Return remainder when second arg divides first
        split    1      Split an atom or number into a list of single-digit numbers or single-character atoms
         test    0+     Establish a testing block (return last expression)
       upcase    1      Return the uppercase version of the given atom
      version    0      Return the version of the interpreter


Other available functions:

           **    2+     Exponentiation operator
      butlast    1+     Return everything but the last element
         caar    1+     First element of the first element of a list of lists
   capitalize    1+     Return the atom argument, capitalized
   complement    1+     Return the logical complement of the supplied function
       concat    0      Concatenenate any number of lists
   constantly    1+     Given a value, return a function which always returns that value
          dec    1+     Return the supplied integer argument, minus one
      dotimes    2+     Run the supplied function n times
         drop    2+     Drop n items from a list, then return the rest
        error    1+     Return an error and (NOT IMPLEMENTED) short-circuit further processing
        even?    1+     Return true if the supplied integer argument is even
    exclaimed    1+     Return l as a sentence... emphasized!
       filter    2+     Keep only values for which function f is true
      flatten    1+     Return a (possibly nested) list, flattened
     identity    1+     Return the argument
           if    3+     Macro: Simple conditional with two branches
          inc    1+     Return the supplied integer argument, plus one
         last    1+     Return the last item in a list
        list*    0      Create a list by consing everything but the last arg onto the last
          map    2+     Apply the supplied function to every element in the supplied list
       mapcat    2+     Map a function onto a list and concatenate results
         neg?    1+     Return true iff the supplied integer argument is less than zero
          nth    2+     Find the nth value of a list, starting from zero
         odd?    1+     Return true if the supplied integer argument is odd
         pos?    1+     Return true iff the supplied integer argument is greater than zero
        progn    0      Macro: Execute multiple statements, returning the last
    punctuate    2+     Return l capitalized, with punctuation determined by the supplied function
    randalpha    1+     Return a list of random (English/Latin/unaccented) alphabetic characters
   randchoice    1+     Return an element at random from the supplied list
    randigits    1+     Return a random integer between 0 and the argument minus 1
        range    1+     List of integers from 0 to n
       reduce    2      Successively apply a function against a list of arguments
       remove    2+     Keep only values for which function f is false / the empty list
       repeat    2+     Return a list of length n whose elements are all x
   repeatedly    2+     Return a list of length n whose elements are made from calling f repeatedly
      reverse    1+     Reverse a list
         take    2+     Take up to n items from the supplied list
   tosentence    1+     Return l as a sentence... capitalized, with a period at the end
         when    2+     Macro: Simple conditional with single branch
     when-not    2+     Macro: Complement of the when macro
        zero?    1+     Return true iff the supplied argument is zero
> ^D
$
