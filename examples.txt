    $ l1
    > t
    t
    > ()  ;; Nil by any other name, would still smell as sweet...
    ()
    > (cons t ())
    (t)
    > (cons (quote hello) (quote (world)))
    (hello world)
    > (quote foo)
    foo
    > (quote (the (ten (laws (of (greenspun))))))
    (the (ten (laws (of (greenspun)))))
    > (cdr (quote (is not common lisp)))
    (not common lisp)
    > (car (quote (is not common lisp)))
    is
    > (+ 1 1)
    2
    > (+ 1 2)
    3
    > (* 12349807213490872130987 12349807213490872130987)
    152517738210391179737088822267441718485594169
    > (eq (quote foo) (quote foo))
    t
    > (eq (quote foo) (quote bar))
    ()
    > (eq (quote foo) (quote (foo bar)))
    ()
    > (atom (quote (foo bar)))
    ()
    > (atom (quote atom))
    t
    > (cond (() 1) (2 3))
    3
    > (car (quote (1 2 3)))
    1
    > (cdr (quote (1 2 3)))
    (2 3)
    > (cons 1 (quote (2 3 4)))
    (1 2 3 4)
    > ((cond (t +)))
    0
    > ((car (cons + ())) 1 2 3)
    6
    > (def a 6)
    6
    > (def b 7)
    7
    > (+ a b)
    13
    > ((lambda ()))
    ()
    > ((lambda (x) (+ 1 x)) 1)
    2
    > (def fact (lambda (n) (cond ((eq 0 n) 1) (t (* n (fact (- n 1)))))))
    <lambda(n)>
    > (fact 50)
    30414093201713378043612608166064768844377641568960512000000000000
    > (def fib (lambda (n) (cond ((eq 0 n) 0) ((eq 1 n) 1) (t (+ (fib (- n 1)) (fib (- n 2)))))))
    <lambda(n)>
    > (fib 0)
    0
    > (fib 1)
    1
    > (fib 7)
    13
    > (fib 10)
    55
    > (fib 20)
    6765
    > (def incrementer (lambda (n) (lambda (x) (+ x n))))
    <lambda(n)>
    > (def inc (incrementer 1))
    <lambda(x)>
    > (inc 5)
    6
    > (def add2 (incrementer 2))
    <lambda(x)>
    > (add2 5)
    7
    > ^D

    $
